#!/usr/bin/env bash

set -e
trap 'error "$(printf "Command \`%s\` at $BASH_SOURCE:$LINENO failed with exit code $?" "$BASH_COMMAND")"' ERR

readonly FORTRESS_DIR="$(
  cd "$(
    dirname "$(
      (readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}") \
        | sed -e "s#^../#$(dirname "$(dirname "${BASH_SOURCE[0]}")")/#"
    )"
  )/.." >/dev/null \
  && pwd
)"

export readonly FORTRESS_BIN="${FORTRESS_DIR}/bin/fortress"
export readonly FORTRESS_VERSION="1.0.0"
export readonly DOCKER_COMPOSE_COMMAND="${DOCKER_COMPOSE_COMMAND:-"docker compose"}"

# Source core.sh unconditionally and early to ensure error handling functions are available.
source "${FORTRESS_DIR}/utils/core.sh"

# Now define FORTRESS_ROOT and other directories.
# These will either point to the installed location or the temporary cloned directory
# depending on whether Fortress is already installed.
export readonly FORTRESS_ROOT="${FORTRESS_ROOT:-/opt/fortress}"
export readonly FORTRESS_APPS_DIR="${FORTRESS_ROOT}/apps"
export readonly FORTRESS_PROXY_DIR="${FORTRESS_ROOT}/proxy"
export readonly FORTRESS_SERVICES_DIR="${FORTRESS_ROOT}/services"
export readonly FORTRESS_BACKUPS_DIR="${FORTRESS_ROOT}/backups"
export readonly FORTRESS_CONFIG_DIR="${FORTRESS_ROOT}/config"

# Source other utility scripts after core.sh and after FORTRESS_ROOT is defined.
# During installation, these will still be sourced from the temporary FORTRESS_DIR
# as FORTRESS_ROOT doesn't fully exist yet for utilities.
source "${FORTRESS_DIR}/utils/apps.sh"
source "${FORTRESS_DIR}/utils/proxy.sh"
source "${FORTRESS_DIR}/utils/backup.sh"


if ! which docker >/dev/null; then
  fatal "Docker could not be found. Please install Docker first."
fi

if ! ${DOCKER_COMPOSE_COMMAND} version >/dev/null 2>&1; then
  fatal "Docker Compose could not be found. Please install Docker Compose v2."
fi

declare FORTRESS_HELP=
declare -a FORTRESS_PARAMS=()
declare FORTRESS_CMD_VERB=
declare FORTRESS_CMD_EXEC=
declare FORTRESS_CMD_HELP=

if (( "$#" )); then
  if [[ -f "${FORTRESS_DIR}/commands/${1}.cmd" ]]; then
    FORTRESS_CMD_VERB="$1"
    FORTRESS_CMD_EXEC="${FORTRESS_DIR}/commands/${1}.cmd"
    FORTRESS_CMD_HELP="${FORTRESS_DIR}/commands/${1}.help"
    shift
  else
    FORTRESS_HELP=1
  fi
else
  FORTRESS_HELP=1
fi

while (( "$#" )); do
  case "$1" in
    -h|--help)
      FORTRESS_HELP=1
      FORTRESS_PARAMS+=("$1")
      shift
      break
      ;;
    --version)
      echo "Fortress version ${FORTRESS_VERSION}"
      exit 0
      ;;
    --debug)
      set -x
      shift
      continue
      ;;
    --)
      shift
      FORTRESS_PARAMS+=("$@")
      break
      ;;
    -*)
      FORTRESS_PARAMS+=("$1")
      shift
      ;;
    *)
      FORTRESS_PARAMS+=("$1")
      shift
      ;;
  esac
done

if [[ ${FORTRESS_HELP} ]]; then
  if [[ -n "${FORTRESS_CMD_VERB}" && -f "${FORTRESS_CMD_HELP}" ]]; then
    source "${FORTRESS_CMD_HELP}"
    echo -e "${FORTRESS_USAGE:-No help text available for command '${FORTRESS_CMD_VERB}'}"
  else
    cat <<EOF
$(echo -e "${COLOR_CYAN}")
    ___                     _             
   / __\__  _ __ _| |_ _ __ ___  ___ ___ 
  / _\/ _ \| '__| __| '__/ _ \/ __/ __|
 / / | (_) | |  | |_| | |  __/\__ \__ \
 \/   \___/|_|   \__|_|  \___||___/___/
$(echo -e "${COLOR_RESET}")
Single VPS Production Deployment Tool v${FORTRESS_VERSION}

$(echo -e "${COLOR_YELLOW}Usage:${COLOR_RESET}")
  fortress <command> [options] [arguments]

$(echo -e "${COLOR_YELLOW}Options:${COLOR_RESET}")
  -h, --help        Display help information
  --version         Display version information
  --debug           Enable debug mode

$(echo -e "${COLOR_YELLOW}Core Commands:${COLOR_RESET}")
  install           Install Fortress on this server
  svc               Manage shared services (postgres, redis, monitoring)
  
$(echo -e "${COLOR_YELLOW}App Management:${COLOR_RESET}")
  app               Deploy and manage applications
  logs              View application logs
  exec              Execute commands in app containers
  
$(echo -e "${COLOR_YELLOW}Infrastructure:${COLOR_RESET}")
  proxy             Manage Traefik proxy configuration
  ssl               Manage SSL certificates
  domain            Manage domain configurations
  
$(echo -e "${COLOR_YELLOW}Database:${COLOR_RESET}")
  db                Database management commands
  
$(echo -e "${COLOR_YELLOW}Operations:${COLOR_RESET}")
  backup            Create and manage backups
  restore           Restore from backups
  monitor           View monitoring dashboards
  health            Check system and app health
  resources         View and manage resource usage
  update            Update Fortress system
  
$(echo -e "${COLOR_YELLOW}Security:${COLOR_RESET}")
  security          Security management commands
  firewall          Manage firewall rules

$(echo -e "${COLOR_YELLOW}Examples:${COLOR_RESET}")
  # Deploy a new app
  fortress app deploy myapp --domain=myapp.com --port=3000
  
  # View app logs
  fortress logs myapp --follow
  
  # Create a backup
  fortress backup create --full
  
  # Check system health
  fortress health check --all

For detailed help on any command, use: fortress <command> --help

Documentation: https://fortress.dev/docs
EOF
  fi
  exit 1
fi

if [[ "${FORTRESS_CMD_VERB}" != "install" && -n "${FORTRESS_CMD_VERB}" ]]; then
  if [[ ! -d "${FORTRESS_ROOT}" ]]; then
    fatal "Fortress is not installed or ${FORTRESS_ROOT} is missing. Run 'fortress install' first."
  fi
fi

if [[ -n "${FORTRESS_CMD_EXEC}" ]]; then
  source "${FORTRESS_CMD_EXEC}"
else
  if [[ -z "${FORTRESS_HELP}" ]]; then 
    error "No command specified or command not found. Displaying general help."
    cat <<EOF
$(echo -e "${COLOR_CYAN}")
    ___                     _             
   / __\__  _ __ _| |_ _ __ ___  ___ ___ 
  / _\/ _ \| '__| __| '__/ _ \/ __/ __|
 / / | (_) | |  | |_| | |  __/\__ \__ \
 \/   \___/|_|   \__|_|  \___||___/___/
$(echo -e "${COLOR_RESET}")
Single VPS Production Deployment Tool v${FORTRESS_VERSION}

$(echo -e "${COLOR_YELLOW}Usage:${COLOR_RESET}")
  fortress <command> [options] [arguments]

Use 'fortress --help' for a list of commands.
EOF
  fi
  exit 1
fi

